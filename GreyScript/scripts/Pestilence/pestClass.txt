//	•—Important Code—•

import_code("/lib/pestLibs/prototype.h")

// 
//	•—CLASSES—•
// 

_Pest = Class("template", {}) 	// CLASS - Main class
// Pest.prototype.shell = null 		// VAR - Host shell object
// Pest.prototype.computer = null 	// VAR - Host computer object
// Pest.prototype.meta = null 		// VAR - Metaxploit object
// Pest.prototype.crypto = null 	// VAR - Crypto object
// Pest.prototype.apt = null 		// VAR - AptClient object

_Error = Class("template", {}) // CLASS - Easily manipulate and report errors
_Error.prototype.msg = ""
_Error.prototype.code = ""
_Error.prototype.report = function()
	return "\n•————————{<color=red> ERROR " + self.code + " </color>}—•<color=#FF2E63> $ </color><color=white>" + self.msg + "\n"
end function

// 
//	•—SUB CLASSES—•
// 

// • Error on the target folder

accessError = new _Error.prototype 
accessError.code = 001
accessError.msg = "Doesn't have permissions or folder/file doesn't exist."
	
// • Error on the depended libraries
	
libError = new _Error.prototype 
libError.code = 002
libError.msg = "Doesn't have permissions or you dont have one of the following libs: \n• metaxploit.so \n• crypto.so \n• aptclient.so"
	
// • Used to report a type error in the object you're working with.
	
objectError = new _Error.prototype 
objectError.code = 003
objectError.msg = "Object type isn't the expected."
	

// 
//	•—FUNCTIONS—•
// 

// • FUNCTION - Get the depended libraries

_Pest.prototype.getDependencies = function() 

	globals.Pest.shell = get_shell
	globals.Pest.computer = get_shell.host_computer
	
	libFolder = globals.Pest.computer.File("/lib")
	if typeof(libFolder) != "file" then exit(accessError.report())
	globals.Pest.meta = include_lib(libFolder.path + "/metaxploit.so")
	globals.Pest.crypto = include_lib(libFolder.path + "/crypto.so")
	globals.Pest.apt = include_lib(libFolder.path + "/aptclient.so")
	
	if globals.Pest.meta == null or globals.Pest.crypto == null or globals.Pest.apt == null then exit(libError.report())
	return 1
end function

// • FUNCTION - gets every child folder on the given parent

_Pest.prototype.getFolders = function(mainFolder, everyFolder) // Get every Folder in the computer
	if not mainFolder.is_folder or typeof(everyFolder) != "list" then exit(objectError.report())
	everyFolder.push(mainFolder)
	for folder in mainFolder.get_folders
		Pest.getFolders(folder, everyFolder)
end for
return everyFolder
end function
		
// • FUNCTION - gets every file on the given list

_Pest.prototype.getFiles = function(folders)
	if typeof(folders) != "list" and typeof(folders) != "file" then exit(objectError.report())
	if typeof(folders) == "file" and folders.is_folder != 1 then exit(objectError.report())
	if is_folder(folders) then return folders.get_files
	everyFile = []
	for folder in folders
		for file in folder.get_files 
		everyFile.push(file)
		end for
	end for
return everyFile
end function

// • FUNCTION - Gets custom user inputs

getInput = function(string)
	if typeof(string) != "string" or string.len < 1 then return user_input("\n•——{<color=red>"+active_user+"</color> @ <color=green>"+Pest.computer.public_ip+"</color> ~ <color=yellow>"+Pest.computer.local_ip+"</color>}—{<color=purple>"+current_path+"</color>}\n•————————• <color=#FF2E63>$ </color><color=white>")
	
	return user_input("•————————{<color=white> " + string +  " </color>}—•<color=#FF2E63> $ </color><color=white>")
end function



// 
// •—RUNNING—•
// 

// Creating the classes

Pest = new Class("Pest", _Pest.prototype).prototype
Error = new Class("Error", _Error.prototype).prototype

// Getting the dependencies

Pest.getDependencies()
Pest.everyFolder = Pest.getFolders(Pest.computer.File("/"), [])
Pest.everyFile = Pest.getFiles(Pest.everyFolder)