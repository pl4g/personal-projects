
_PestExploit = Class("template", {}) 	// CLASS - Main class
_PestExploit.portList = [] 			 	// VAR - List of ports objects
// PestExploit.router = null 			// VAR - Router object
// PestExploit.netSession = null 		// VAR - NetSession object
// PestExploit.dumpedLib = null 		// VAR - Dumped Lib object


// 
// •—ERROR—•
// 

// • Error on the target IP

ipError = new Error
ipError.code = 004
ipError.msg = "Target IP invalid or couldn't be reached."

// • Error on the target port

portError = new Error
portError.code = 005
portError.msg = "No ports found on the targeted IP."

// • Target port is closed

closedError = new Error
closedError.code = 006
closedError.msg = "Can't connect: Closed Port."

// • Vulnerability error

vulError = new Error
vulError.code = 007
vulError.msg = "Vulnerability not found."

// 
//	•—FUNCTIONS—•
// 

// • FUNCTION - Maps the targeted IP and returns a string of formated columns

_PestExploit.prototype.Mapper = function(target)

	if not is_valid_ip(target) then target = nslookup(target)
	if target == "Not found" then exit(ipError.report())
	if Pest.shell.ping(target) != true then exit(ipError.report())
	
	if is_lan_ip(target) then
		globals.PestExploit.router = get_router
		ports = PestExploit.router.device_ports(target)
	else 
		globals.PestExploit.router = get_router(target)
		ports = PestExploit.router.used_ports
	end if
	
	if ports.len == 0 then exit(portError.report())
	
	info = "<color=white>0 •</color> PORT <color=white>•</color> STATE <color=white>•</color> SERVICE <color=white>•</color> VERSION <color=white>•</color> LAN"
	print("\n•————————————————{ <color=white>SCANNING • " + target + "</color> }————————————————•\n")
	i = 0
	for port in ports
		i = i + 1
		
		pInfo = PestExploit.router.port_info(port).split(" ")
		lanIp = port.get_lan_ip
		globals.PestExploit.portList.push(port)
		isOpen = "open"
		
		if port.is_closed and not is_lan_ip(target) then isOpen = "closed"
		
		info = info + "\n<color=white>" + i + " •</color> "+ port.port_number + " <color=white>•</color> " + isOpen + " <color=white>•</color> " + pInfo.join(" <color=white>•</color> ") + " <color=white>•</color> " + lanIp
	end for
	return format_columns(info) + "\n"
end function


// • FUNCTION - Scans the given port library to find vulnerabilities

_PestExploit.prototype.Scanner = function(target, port)

	port = globals.PestExploit.portList["ports"][(port-1)]
	
	if port.is_closed then exit(closedError.report())
	
	print("\n•————————————————{ <color=white>SCANNING • " + router.port_info(port).split(" ")[0].upper + " • " + router.port_info(port).split(" ")[1].upper + "</color> }————————————————•\n")
	
	globals.PestExploit.netSession = Pest.meta.net_use(target, port.port_number)
	globals.PestExploit.dumpedLib  = PestExploit.dumpedLib.dump_lib
	globals.PestExploit.memoryList = Pest.meta.scan(PestExploit.dumpedLib)
	
	
	if typeof(memoryList) != "list" then exit(vulError.report())
	
	for memory in PestExploit.memoryList
		print("<color=white>" + (PestExploit.memoryList.indexOf(memory) + 1) + " •</color> <i>" + memory)
	end for
	
	print("\n<color=white>0 •</color> [ALL]\n•————————————————{ <color=white>ISSUES: " + memoryList.len + "</color> }————————————————•\n")
	memoryInput = getInput("Memory").to_int
	print("•————————————————{ <color=white>SCANNING VULNERABILITIES</color> }————————————————•\n")
	
	PestExploit.vulnList = []
	if memoryInput != 0 then
		targetVul = (Pest.meta.scan_address(PestExploit.lib, PestExploit.memoryList[memoryInput-1])).split("\n")[2:]
		print("<b><color=white>0 • <i>"+listMem[memory-1]+"</i></b></color>\n")
		print(PestExploit.getVul(targetVul, memoryInput))
	else 
		targetVul = ""
		for memory in memoryList
			targetVul = (targetVul + Pest.meta.scan_address(PestExploit.lib, memory)).split("\n")[2:]
			print("<b><color=white>"+ (PestExploit.memoryList.indexOf(memory)+1)+" • <i>"+memory+"</i></b></color>\n")
			print(PestExploit.getVul(targetVul))
		end for
	end if
	
	target = getInput("Vulnerability")
		
	if not PestExploit.vulnList.indexOf(target) or not PestExploit.vulnList.hasIndex(possibleVul.indexOf(target)) then exit(vulError.report())
		
	for vul in possibleVul
		if vul == target then
			return(vul)
		end if
	end for
end function

// • FUNCTION - Get the vulnerabilities in the given list.

_PestExploit.prototype.getVul = function(vuls, targetNumber)
	i = 0
	if targetNumber == null then i = null
	
	for vul in vuls
		if vul.hasIndex(0) and vul[0] == "*" then
			return vul.replace("*", "    <color=white>•</color>")
		else if vul.hasIndex(0) and str[0] == "U" then
			if i != null then i = i + 1
			
			vul = slice(vul, vul.indexOf("<b>"), vul.indexOf("</b>"))
			globals.PestExploit.vulnList.push(vul.remove("<b>").remove("</b>"))
			
			if i != null then return "<color=#FF2E63><b>"+i+"</b></color> <color=white>• <color=#FF2E63>"+vul+"</color>"
			return "<color=#FF2E63><b>VUL</b></color> <color=white>• <color=#FF2E63>"+vul+"</color>"
		else
			return vul
		end if
	end for
end function

_PestExploit.prototype.automateExploit = function(target)
	
	print(PestExploit.Mapper(target))
	scanned = PestExploit.Scanner(target, Pest.getInput("Port"))
	print(scanned)
	
	
end function

PestExploit = new Class("PestExploit", _PestExploit.prototype).prototype
